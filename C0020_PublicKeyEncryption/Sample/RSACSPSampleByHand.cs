using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.Security.Cryptography;

using C0010_SecretKeyEncryption.Util;



namespace C0020_PublicKeyEncryption.Sample
{


    /// <summary>
    /// 手工指定  公钥 与 私钥
    /// </summary>
    class RSACSPSampleByHand : RSACSPSample
    {


        public static void DoTestByHand()
        {

            Console.WriteLine("使用 RSACryptoServiceProvider 类将一个字符串加密为一个字节数组，然后将这些字节解密为字符串。");


            try
            {
                // Create a UnicodeEncoder to convert between byte array and string.
                UnicodeEncoding ByteConverter = new UnicodeEncoding();


                string source = "Data to Encrypt  这个是一个用于测试加密的文本信息！";


                //Create byte arrays to hold original, encrypted, and decrypted data.
                byte[] dataToEncrypt = ByteConverter.GetBytes(source);
                byte[] encryptedData;
                byte[] decryptedData;


                Console.WriteLine("原始文本信息：{0}", source);
                Console.WriteLine("原始数据！");
                ByteArrayOutput.Print(dataToEncrypt);


                // 加密  (公钥加密).
                encryptedData = RSAEncrypt(dataToEncrypt, GetPublicKey(), false);

                Console.WriteLine("公钥加密后的数据！");
                ByteArrayOutput.Print(encryptedData);



                // 解密  (私钥解密)
                decryptedData = RSADecrypt(encryptedData, GetPrivateKey(), false);

                Console.WriteLine("私钥解密后的数据！");
                ByteArrayOutput.Print(decryptedData);


                // 输出.
                Console.WriteLine("解密后的文本: {0}", ByteConverter.GetString(decryptedData));
            }
            catch (ArgumentNullException)
            {
                //Catch this exception in case the encryption did
                //not succeed.
                Console.WriteLine("Encryption failed.");

            }
        }









        /// <summary>
        /// 取得公钥
        /// </summary>
        /// <returns></returns>
        static RSAParameters GetPublicKey()
        {
            RSAParameters result = new RSAParameters
            {
                Exponent = new byte[3] { 01, 00, 01 },
                Modulus = new byte[]{ 
0x9E, 0x8C,  0x90,  0x5A  ,  0x6A  ,  0x96  ,  0xFE  ,  0xBF  ,  0x6D  ,  0xB2  ,  0xA6  ,  0xA2  ,  0xCA  ,  0xBF  ,  0xD6  ,  0x5E,
0xCC, 0x95,  0xBB,  0x74  ,  0xAD  ,  0x42  ,  0xFD  ,  0x3B  ,  0x08  ,  0x3E  ,  0xC6  ,  0xA1  ,  0xA5  ,  0xEE  ,  0xE1  ,  0x86,
0x9F, 0x6C,  0xD6,  0xE1  ,  0xF6  ,  0xDE  ,  0xFA  ,  0xC3  ,  0x2A  ,  0xDD  ,  0x23  ,  0xD3  ,  0x47  ,  0x79  ,  0x20  ,  0xE3,
0x26, 0xBC,  0x7E,  0x38  ,  0x83  ,  0xD9  ,  0xEC  ,  0x3C  ,  0xF4  ,  0x1A  ,  0x87  ,  0x01  ,  0x31  ,  0x6C  ,  0x39  ,  0x69,
0xBD, 0xB9,  0x35,  0x34  ,  0xB0  ,  0xDD  ,  0x6E  ,  0x0D  ,  0x01  ,  0x31  ,  0xA2  ,  0xED  ,  0x3F  ,  0x40  ,  0x34  ,  0x2E,
0xCD, 0x29,  0x59,  0xA5  ,  0x4E  ,  0x23  ,  0x89  ,  0x86  ,  0x0C  ,  0x3C  ,  0xE5  ,  0x4C  ,  0x7C  ,  0xBB  ,  0x78  ,  0x79,
0xC1, 0x5F,  0xC8,  0x98  ,  0xCB  ,  0xA9  ,  0xD9  ,  0x46  ,  0xFF  ,  0x8A  ,  0x57  ,  0xE3  ,  0x05  ,  0x3D  ,  0xF9  ,  0xF3,
0x35, 0xB7,  0x90,  0x26  ,  0x3B  ,  0x35  ,  0x54  ,  0x85  ,  0xB0  ,  0x74  ,  0xF8  ,  0xDE  ,  0x42  ,  0xB0  ,  0xA3  ,  0xE7,               
                },
            };



            Console.WriteLine("---------- 公钥信息 ----------");
            PrintRSAParameters(result);

            return result;
        }



        /// <summary>
        /// 取得私钥
        /// </summary>
        /// <returns></returns>
        static RSAParameters GetPrivateKey()
        {
            RSAParameters result = new RSAParameters
            {

                D = new byte[] {
0x44  , 0xB1  , 0x0D  , 0xD1  , 0xBE  , 0xA0  , 0x90  , 0xDA  , 0x8B  , 0x42  , 0x7D  , 0xA3  , 0xC6  , 0x47  , 0xFB  , 0x2E ,
0xB3  , 0x60  , 0xA4  , 0x08  , 0xD7  , 0x10  , 0x50  , 0xFA  , 0x84  , 0x85  , 0xFE  , 0x35  , 0x06  , 0xD9  , 0x4A  , 0x68 ,
0xB3  , 0x25  , 0xCA  , 0xAB  , 0xB7  , 0xF3  , 0xBF  , 0x9D  , 0x53  , 0x32  , 0xE0  , 0x54  , 0xA7  , 0x80  , 0xB9  , 0x58 ,
0xF0  , 0xED  , 0x75  , 0x9A  , 0x32  , 0xB5  , 0xF5  , 0xFE  , 0x2A  , 0x9C  , 0x5B  , 0xA5  , 0x8E  , 0xAE  , 0x1E  , 0xE9 ,
0x1C  , 0x46  , 0xD9  , 0xF3  , 0x90  , 0xA1  , 0x64  , 0x48  , 0x71  , 0xD3  , 0x60  , 0xEF  , 0x7A  , 0x3B  , 0x41  , 0x74 ,
0xB7  , 0xDD  , 0xB2  , 0xE7  , 0xB2  , 0x54  , 0x74  , 0x35  , 0xD5  , 0x4D  , 0x5A  , 0xF9  , 0x68  , 0xA0  , 0x0D  , 0x4F ,
0x0E  , 0xE9  , 0x4B  , 0x24  , 0x1C  , 0xE8  , 0xED  , 0xEF  , 0x95  , 0x5C  , 0xCC  , 0x61  , 0x3C  , 0x83  , 0xB4  , 0x1E ,
0x03  , 0xF0  , 0xD5  , 0xE9  , 0xD7  , 0x9A  , 0x94  , 0xC7  , 0x6A  , 0xB3  , 0x6F  , 0x2B  , 0xB8  , 0x5D  , 0x7B  , 0xF1 ,
                },


                DP = new byte[] {
0x91  , 0x71  , 0xEE  , 0x54  , 0xE8  , 0x42  , 0x1B  , 0x64  , 0xD0  , 0x48  , 0x29  , 0xA4  , 0x90  , 0xF1  , 0x46 , 0x68,
0xA2  , 0x3E  , 0x86  , 0xB1  , 0x03  , 0xF7  , 0x8E  , 0x3B  , 0xF3  , 0x38  , 0xC7  , 0xF4  , 0xFF  , 0xA2  , 0x47 , 0xA7,
0x69  , 0x39  , 0x4F  , 0x92  , 0xC5  , 0xEA  , 0xF6  , 0xEF  , 0x18  , 0x45  , 0x52  , 0x2D  , 0x42  , 0xB7  , 0x4F , 0xA3,
0xCE  , 0x15  , 0xC3  , 0x6F  , 0x81  , 0x7A  , 0x78  , 0x15  , 0xCC  , 0xBD  , 0x32  , 0x85  , 0x0E  , 0x5A  , 0xC8 , 0x19,
                },


                DQ = new byte[] {
0x54  , 0xCB  , 0x5E  , 0xE7  , 0x56  , 0xB5  , 0xCC  , 0x57  , 0xD0  , 0x89  , 0x93  , 0x8D  , 0x5D  , 0xF4  , 0x0E  , 0x43,
0x0F  , 0x5A  , 0x51  , 0xDE  , 0x0A  , 0x54  , 0xC5  , 0x91  , 0x40  , 0x3C  , 0x12  , 0x81  , 0x55  , 0x7F  , 0xC7  , 0xE9,
0xFC  , 0xFF  , 0x83  , 0xAF  , 0xC0  , 0x79  , 0xB4  , 0x38  , 0xB8  , 0x19  , 0x08  , 0x90  , 0xD8  , 0x9E  , 0x84  , 0x36,
0x5B  , 0xEC  , 0x11  , 0x5E  , 0xB9  , 0x04  , 0xAB  , 0x21  , 0xF9  , 0x64  , 0x4C  , 0x3F  , 0x8E  , 0x74  , 0x4A  , 0xE1,
                },




                Exponent = new byte[3] { 01, 00, 01 },
                Modulus = new byte[]{ 
0x9E, 0x8C,  0x90,  0x5A  ,  0x6A  ,  0x96  ,  0xFE  ,  0xBF  ,  0x6D  ,  0xB2  ,  0xA6  ,  0xA2  ,  0xCA  ,  0xBF  ,  0xD6  ,  0x5E,
0xCC, 0x95,  0xBB,  0x74  ,  0xAD  ,  0x42  ,  0xFD  ,  0x3B  ,  0x08  ,  0x3E  ,  0xC6  ,  0xA1  ,  0xA5  ,  0xEE  ,  0xE1  ,  0x86,
0x9F, 0x6C,  0xD6,  0xE1  ,  0xF6  ,  0xDE  ,  0xFA  ,  0xC3  ,  0x2A  ,  0xDD  ,  0x23  ,  0xD3  ,  0x47  ,  0x79  ,  0x20  ,  0xE3,
0x26, 0xBC,  0x7E,  0x38  ,  0x83  ,  0xD9  ,  0xEC  ,  0x3C  ,  0xF4  ,  0x1A  ,  0x87  ,  0x01  ,  0x31  ,  0x6C  ,  0x39  ,  0x69,
0xBD, 0xB9,  0x35,  0x34  ,  0xB0  ,  0xDD  ,  0x6E  ,  0x0D  ,  0x01  ,  0x31  ,  0xA2  ,  0xED  ,  0x3F  ,  0x40  ,  0x34  ,  0x2E,
0xCD, 0x29,  0x59,  0xA5  ,  0x4E  ,  0x23  ,  0x89  ,  0x86  ,  0x0C  ,  0x3C  ,  0xE5  ,  0x4C  ,  0x7C  ,  0xBB  ,  0x78  ,  0x79,
0xC1, 0x5F,  0xC8,  0x98  ,  0xCB  ,  0xA9  ,  0xD9  ,  0x46  ,  0xFF  ,  0x8A  ,  0x57  ,  0xE3  ,  0x05  ,  0x3D  ,  0xF9  ,  0xF3,
0x35, 0xB7,  0x90,  0x26  ,  0x3B  ,  0x35  ,  0x54  ,  0x85  ,  0xB0  ,  0x74  ,  0xF8  ,  0xDE  ,  0x42  ,  0xB0  ,  0xA3  ,  0xE7,               
                },


                InverseQ = new byte[] {
0x13  , 0xB6  , 0xC4  , 0xD7  , 0x7A  , 0xE2  , 0xEF  , 0x30  , 0x3F  , 0x05  , 0x1A  , 0xBF  , 0x7D  , 0x42  , 0x1F  , 0x56,
0x3A  , 0xE4  , 0xEF  , 0x41  , 0xA9  , 0xF5  , 0x0B  , 0xD3  , 0x77  , 0x90  , 0x1A  , 0xF3  , 0xE4  , 0xB8  , 0xE6  , 0x74,
0x68  , 0xE4  , 0xBA  , 0x15  , 0xE7  , 0xDA  , 0xBF  , 0x44  , 0xB1  , 0xB6  , 0x43  , 0x61  , 0xB6  , 0x6A  , 0x23  , 0x0D,
0xDA  , 0x12  , 0x89  , 0x95  , 0xA4  , 0xEA  , 0x73  , 0xAD  , 0x42  , 0x21  , 0x0D  , 0x03  , 0x06  , 0x11  , 0xE0  , 0x19,
                },



                P = new byte[]
                {
0xD7  , 0xD7  , 0xA7  , 0x17  , 0xCB  , 0x2C  , 0x69  , 0xD2  , 0x22  , 0x2F  , 0x0E  , 0xEC  , 0xDF  , 0xB2  , 0xF7  , 0xC4 ,
0x99  , 0x08  , 0x1C  , 0x01  , 0xF6  , 0x90  , 0xE9  , 0x19  , 0x80  , 0xC0  , 0x85  , 0x15  , 0x22  , 0x05  , 0xF4  , 0x7C ,
0x55  , 0xEF  , 0xC0  , 0x12  , 0xAC  , 0xA9  , 0xC2  , 0x73  , 0x13  , 0x01  , 0x23  , 0x86  , 0xC2  , 0x2C  , 0x9A  , 0x5A ,
0x64  , 0xF1  , 0x93  , 0x1E  , 0x99  , 0xDC  , 0x0B  , 0xA4  , 0x40  , 0x9E  , 0x0A  , 0x6C  , 0x97  , 0x69  , 0x99  , 0x0D ,
                },



                Q = new byte[]
                {
0xBC  , 0x0C  , 0x17  , 0x2B  , 0x91  , 0xEC  , 0x9F  , 0x3B  , 0xFC  , 0xF6  , 0x78  , 0xC8  , 0x92  , 0x60  , 0x92  , 0xD7,
0xA5  , 0x54  , 0xB2  , 0x74  , 0x64  , 0xC9  , 0xF1  , 0xA3  , 0x2F  , 0xA8  , 0x02  , 0xBF  , 0xE5  , 0x65  , 0xD9  , 0xD4,
0x85  , 0x6B  , 0x25  , 0x6A  , 0x9F  , 0x32  , 0xC4  , 0xF9  , 0xDE  , 0x9C  , 0xA0  , 0x96  , 0x88  , 0x84  , 0xC1  , 0x1D,
0xCD  , 0x03  , 0xDB  , 0x80  , 0x93  , 0x39  , 0xD5  , 0x5E  , 0x26  , 0x96  , 0x04  , 0x77  , 0xFC  , 0x03  , 0x8B  , 0xC3,
                }



            };





            Console.WriteLine("---------- 私钥信息 ----------");
            PrintRSAParameters(result);

            return result;
        }





    }
}
